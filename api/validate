#!/usr/bin/php
<?php
/*
 * Copyright (C) 2019 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/
require_once("/usr/libexec/nethserver/api/lib/Helpers.php");
$data = readInput();
$v = new LegacyValidator($data);
$cmd = $data['action'];
    $cdb = new EsmithDatabase('crontab');
    if ($data['action'] == 'update') {
        if (!$cdb->getKey($data['name'])) {
            $v->addValidationError('name', 'cron_not_found');
        }
    } else if ($data['action'] == 'create') {
        if ($cdb->getKey($data['name'])) {
            $v->addValidationError('name', 'cron_already_exists');
        }
    }

    # validator routines
    $userNameValidator = $v->createValidator(Validate::USERNAME)->platform('user-create');
    $minutes = $v->createValidator()->orValidator($v->createValidator()->memberOf('*'),
            $v->createValidator()->integer()->lessThan(60));
    $hours = $v->createValidator()->orValidator($v->createValidator()->memberOf('*'),
            $v->createValidator()->integer()->lessThan(24));
    $days = $v->createValidator()->orValidator($v->createValidator()->memberOf('*'),
            $v->createValidator()->integer()->greatThan(0)->lessThan(32));
    $months =  $v->createValidator()->memberOf(array('*','1m','2m', '3m',
            '4m','5m','6m','7m','8m','9m','10m','11m','12m'));
    $weekday = $v->createValidator()->memberOf(array('*','1w','2w','3w',
            '4w','5w','6w','7w'));
    $every = $v->createValidator()->memberOf('*','disabled');
    $eachX = $v->createValidator()->memberOf('*/','disabled');

    # Validators
    $v->declareParameter('name', $userNameValidator);
    $v->declareParameter('Minute', $minutes);
    $v->declareParameter('Hour', $hours);
    $v->declareParameter('Day', $days);
    $v->declareParameter('Month', $months);
    $v->declareParameter('WeekDay', $weekday);
    if ($data['Advanced'] === 'disabled') {
        $v->declareParameter('User', $userNameValidator);
    }
    $v->declareParameter('status', Validate::SERVICESTATUS);
    $v->declareParameter('Mail', Validate::SERVICESTATUS);

    $v->declareParameter('EveryMinute', $every);
    $v->declareParameter('EveryHour', $every);
    $v->declareParameter('EveryDay', $every);
    $v->declareParameter('EveryMonth', $every);
    $v->declareParameter('EveryWeekDay', $every);

    $v->declareParameter('EachXMinute', $eachX);
    $v->declareParameter('EachXHour', $eachX);
    $v->declareParameter('EachXDay', $eachX);
    $v->declareParameter('EachXMonth', $eachX);
    $v->declareParameter('EachXWeekDay', $eachX);

    if ($data['Advanced'] === 'enabled') {
        $v->declareParameter('AdvancedUser', $userNameValidator);
    }
    if (
      (preg_match('/[A-Za-z]+/',$data['AdvancedCron'], $matches)) ||
      (preg_match('/(;|\"|\||#|\')/',$data['AdvancedCron'], $matches)) ||
      (preg_match('/\\n/',$data['AdvancedCron'], $matches)) ||
      (preg_match('/\\\/',$data['AdvancedCron'], $matches))
    ) {
        $v->addValidationError('AdvancedCron','Bad_cron', $matches);
    }

    # escape command line
    $escaped_command = escapeshellcmd($data['Cmd']);
    # we want to avoid to have a second cron from the CL with administrators users
    if (
          (preg_match('/(root\s|admin\s|administrator\s)/i',$escaped_command, $matches)) ||
          (preg_match('/(\d\-\d)\s/',$escaped_command, $matches)) ||
          (preg_match('/(\d\,\d)\s/',$escaped_command, $matches)) ||
          (preg_match('/\\n/',$escaped_command, $matches)) || 
          (preg_match('/\\\/',$escaped_command, $matches)) 
       ) {
        $v->addValidationError('Cmd','Bad_Command_Line', $matches);  
    }
    $v->declareParameter('Advanced', Validate::SERVICESTATUS);

# Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}
